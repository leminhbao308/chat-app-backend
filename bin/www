#!/usr/bin/env node

/**
 * Module dependencies.
 */
import * as http from "node:http";
import App from "../src/app.js";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

/**
 * Configuration and Environment Setup
 */
const PORT = normalizePort(process.env.PORT || '3000');
const NODE_ENV = process.env.NODE_ENV || 'development';

/**
 * Server Initialization
 */
class Server {
    constructor(app, port) {
        this.app = app;
        this.port = port;
        this.httpServer = null;
    }

    start() {
        // Retrieve the actual Express app
        const expressApp = this.app.getApp();

        // Set port on the Express app
        expressApp.set('port', this.port);

        this.httpServer = http.createServer(expressApp);

        this.httpServer.listen(this.port);
        this.httpServer.on('error', this.handleServerError.bind(this));
        this.httpServer.on('listening', this.handleServerListening.bind(this));
    }

    handleServerError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof this.port === 'string'
            ? `Pipe ${this.port}`
            : `Port ${this.port}`;

        switch (error.code) {
            case 'EACCES':
                console.error(`${bind} requires elevated privileges`);
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(`${bind} is already in use`);
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    handleServerListening() {
        const addr = this.httpServer.address();
        const bind = typeof addr === 'string'
            ? `pipe ${addr}`
            : `port ${addr.port}`;

        console.log(`✅ Server started successfully`);
        console.log(`🌐 Listening on http://localhost:${this.port}`);
        console.log(`📍 Environment: ${NODE_ENV}`);
    }
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Initialize and start the server
const expressApp = App;
const server = new Server(expressApp, PORT);
server.start()
